image: atlassian/default-image:latest

definitions:
  services:
    postgres:
      image: postgres:11
      environment:
        POSTGRES_DB: 'testdb'
        POSTGRES_USER: 'testuser'
        POSTGRES_PASSWORD: 'testpassword'
    redis:
      image: redis:latest

  steps:
    - step: &lint
        name: Lint
        image: &python-image python:3.10
        script:
          - pip cache list
          - pip install --no-deps -r requirements/requirements.lint.txt
          - make lint
    - step: &build
        name: Build
        image: *python-image
        script:
          - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD
          - docker build -t int-backend:${BITBUCKET_BRANCH} .
          - docker push int-backend:${BITBUCKET_BRANCH}
        services:
          - docker
    - step: &tests
        name: Tests
        image: *python-image
        script:
          - export DB_USER=testuser
          - export DB_PASS=testpassword
          - export DB_HOST=host.docker.internal
          - export DB_NAME=testdb
          - export STABLE_DIFFUSION_API_URL=http://:8097
          - export REDIS_HOST=host.docker.internal
          - export REDIS_PORT=6379
          - export OPENAI_API_KEY=${OPENAI_API_KEY}
          - export SENTRY_DSN=https://
          - export SENTRY_ENV=bitbucket-${BITBUCKET_BRANCH}
          - export STATIC_URL=https://api.int.ai/staticfiles/
          - export NSFW_MODE=on
          - export DAILY_MESSAGE_LIMIT=25
          - pip install --no-deps -r requirements/requirements.txt
          - pip install --no-deps -r requirements/requirements.test.txt
          - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD
          - docker run -d -e NSFW_MODE=$NSFW_MODE -e STATIC_URL=$STATIC_URL -e STABLE_DIFFUSION_API_URL=$STABLE_DIFFUSION_API_URL -e SENTRY_ENV=$SENTRY_ENV -e SENTRY_DSN=$SENTRY_DSN -e DB_USER=$DB_USER -e DB_PASS=$DB_PASS -e DB_HOST=$DB_HOST -e DB_NAME=$DB_NAME -e REDIS_HOST=$REDIS_HOST -e REDIS_PORT=$REDIS_PORT -e OPENAI_API_KEY=$OPENAI_API_KEY --add-host host.docker.internal:$BITBUCKET_DOCKER_HOST_INTERNAL --name int-backend-test -p 8080:8080 eslider/int-backend:${BITBUCKET_BRANCH}
          - docker run -d -e NSFW_MODE=$NSFW_MODE -e STATIC_URL=$STATIC_URL -e STABLE_DIFFUSION_API_URL=$STABLE_DIFFUSION_API_URL -e SENTRY_ENV=$SENTRY_ENV -e SENTRY_DSN=$SENTRY_DSN -e DB_USER=$DB_USER -e DB_PASS=$DB_PASS -e DB_HOST=$DB_HOST -e DB_NAME=$DB_NAME -e REDIS_HOST=$REDIS_HOST -e REDIS_PORT=$REDIS_PORT -e OPENAI_API_KEY=$OPENAI_API_KEY --add-host host.docker.internal:$BITBUCKET_DOCKER_HOST_INTERNAL --name int-celery eslider/int-backend:${BITBUCKET_BRANCH} celery -A service.celery_app worker --loglevel=info --concurrency=8 -Q th_queue
          - sleep 5
          - python -m pytest
        services:
          - postgres
          - redis
          - docker
        caches:
        #  - docker
          - pip
    - step: &k8s-build-tests
        name: Build & Tests
        image: *python-image
        script:
          - docker build -t int-backend:${BITBUCKET_BRANCH}-${BITBUCKET_BUILD_NUMBER} .
          - pipe: atlassian/aws-ecr-push-image:2.1.0
            variables:
                AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_STAGE}
                AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY_STAGE}
                AWS_DEFAULT_REGION: us-east-1
                IMAGE_NAME: int-backend
                TAGS: ${BITBUCKET_BRANCH}-${BITBUCKET_BUILD_NUMBER}
        services:
          - postgres
          - redis
          - docker
        caches:
        #  - docker
          - pip
    - step: &k8s-deploy
        name: Deploy to EKS
        trigger: manual
        services:
          - docker
        caches:
          - docker
        script:
            - pipe: atlassian/aws-eks-kubectl-run:2.4.0
              variables:
                AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_STAGE}
                AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY_STAGE}
                AWS_DEFAULT_REGION: "us-east-1"
                CLUSTER_NAME: "int-stage"
                KUBECTL_COMMAND: "set image deployment/alembic alembic=5***********3.dkr.ecr.us-east-1.amazonaws.com/int-backend:$BITBUCKET_BRANCH-$BITBUCKET_BUILD_NUMBER -n int"
            - pipe: atlassian/aws-eks-kubectl-run:2.4.0
              variables:
                AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_STAGE}
                AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY_STAGE}
                AWS_DEFAULT_REGION: "us-east-1"
                CLUSTER_NAME: "int-stage"
                KUBECTL_COMMAND: "wait --for=condition=available --timeout=120s deployment/alembic -n int"
            - pipe: atlassian/aws-eks-kubectl-run:2.4.0
              variables:
                AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_STAGE}
                AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY_STAGE}
                AWS_DEFAULT_REGION: "us-east-1"
                CLUSTER_NAME: "int-stage"
                KUBECTL_COMMAND: "set image deployment/backend-app backend-app=5***********3.dkr.ecr.us-east-1.amazonaws.com/int-backend:$BITBUCKET_BRANCH-$BITBUCKET_BUILD_NUMBER -n int"
            - pipe: atlassian/aws-eks-kubectl-run:2.4.0
              variables:
                AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_STAGE}
                AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY_STAGE}
                AWS_DEFAULT_REGION: "us-east-1"
                CLUSTER_NAME: "int-stage"
                KUBECTL_COMMAND: "set image deployment/celery-askme celery-askme=5***********3.dkr.ecr.us-east-1.amazonaws.com/int-backend:$BITBUCKET_BRANCH-$BITBUCKET_BUILD_NUMBER -n int"
            - pipe: atlassian/aws-eks-kubectl-run:2.4.0
              variables:
                AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_STAGE}
                AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY_STAGE}
                AWS_DEFAULT_REGION: "us-east-1"
                CLUSTER_NAME: "int-stage"
                KUBECTL_COMMAND: "set image deployment/celery-main celery-main=5***********3.dkr.ecr.us-east-1.amazonaws.com/int-backend:$BITBUCKET_BRANCH-$BITBUCKET_BUILD_NUMBER -n int"
            - pipe: atlassian/aws-eks-kubectl-run:2.4.0
              variables:
                AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_STAGE}
                AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY_STAGE}
                AWS_DEFAULT_REGION: "us-east-1"
                CLUSTER_NAME: "int-stage"
                KUBECTL_COMMAND: "set image deployment/celery-profile celery-profile=5***********3.dkr.ecr.us-east-1.amazonaws.com/int-backend:$BITBUCKET_BRANCH-$BITBUCKET_BUILD_NUMBER -n int"

pipelines:
  branches:
    master:
      - step: *lint
      - step: *build
      # - step: *tests
      - step:
          name: Deploy to production
          trigger: manual
          deployment: production
          script:
            - curl -v -L -XPOST https://api.int.ai/deploy/deploy-backend?token=$DEPLOY_TOKEN
    develop:
      - step: *lint
    test:
      - step: *lint
      - step: *k8s-build-tests
      - step: *k8s-deploy
