pipeline {
    agent any
    environment {
        //PROJECT_NAME = '' //send from bitbucket in webhook url and get jenkins as request parametr
        //PROJECT_BRANCH = '' //parametr get from bitbucket webhook - get by jenkins jsonpath
        //WORKSPACE = '' //parametr get from bitbucket webhook - get by jenkins jsonpath
        //REPOSITORY_NAME = '' //get from bitbucket webhook - get by jenkins jsonpath
        PROJECT_GIT = "" //creds project_source_up_1
        DOCKER_REGISTRY_URL = ''
        APP_LIST = ""

        CONTEXT = "${env.PROJECT_BRANCH == "test" ? "fcc--stage" : "IMAGE2"}"
        BUILD_PATH = "${REPOSITORY_NAME}"
    }

    stages {
        stage("build name") {
            steps {
                script {
                    echo "PROJECT_GIT ${PROJECT_GIT}"
                    echo "REPOSITORY_NAME ${REPOSITORY_NAME}"
                    echo "PROJECT_NAME ${PROJECT_NAME}"
                    echo "PROJECT_BRANCH ${PROJECT_BRANCH}"
                    echo "WORKSPACE ${WORKSPACE}" 
                    echo "Image is ${PROJECT_NAME}:${PROJECT_BRANCH}-${BUILD_NUMBER}"

                    if (env.REPOSITORY_NAME == "scheduler-service") {
                        APP_LIST = "1,2"
                    } else if (env.REPOSITORY_NAME == "backend") {
                        APP_LIST = "3,4,5,6,7"
                    } else {
                        APP_LIST = "$REPOSITORY_NAME"
                    }
                    echo "APP ${APP_LIST}"                
                
                    def now = new Date()
                    def formatDate = now.format("dd-MM-yyyy HH-mm-ss", TimeZone.getTimeZone('UTC'))
                    currentBuild.displayName = "${PROJECT_NAME}-${PROJECT_BRANCH}:${formatDate} UTC"
                }
            }
        }
        stage('Get project source') {
            steps {
                dir(BUILD_PATH) {
                    script{
                        checkout([$class: 'GitSCM',
                            branches: [[name: PROJECT_BRANCH]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'CloneOption', depth: 1, noTags: false, reference: '', shallow: true, timeout: 240]],
                            submoduleCfg: [],
                            userRemoteConfigs: [[credentialsId:  'jen', url: PROJECT_GIT]]
                        ])
                    }
                    script{
                        shortCommit = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
                        FullCommit = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%H'").trim()
                        proj_commit = "$BUILD_NUMBER"
                        proj_commiter = sh(returnStdout: true, script: "git log -1 --pretty=format:'%an'").trim()
                        proj_message = sh(returnStdout: true, script: "git log -1 --pretty=%B").trim()
                    }
                }
            }
        }
        stage('Lint') {
            steps {
                dir(BUILD_PATH) {
                    script {
                        if (!env.PROJECT_NAME.contains("landing") && !env.PROJECT_NAME.contains("web-chat")) {
                            sh 'pip cache list'
                            sh 'pip install --no-deps -r requirements/requirements.lint.txt'
                            sh 'make lint'
                        }
                    }
                }
            }
        }
        stage ('Docker build') {
            steps {
                dir(BUILD_PATH) {
                    script {

                        //def buildArgs = []
                        //if (PROJECT_NAME == "landing") {
                        //    buildArgs << "--build-arg ENVIRONMENT="${PROJECT_BRANCH}""
                        //} else if (PROJECT_NAME == "project2") {
                        //    buildArgs << "--build-arg ENVIRONMENT=production"
                        //} else {
                        //
                        //}
                        docker.withRegistry("https://${DOCKER_REGISTRY_URL}",'ecr:us-east-1:1-aws'){
                            def customImage = docker.build("${PROJECT_NAME}:${PROJECT_BRANCH}-${BUILD_NUMBER}"," .")
                            //def customImage = docker.build("${PROJECT_NAME}:${PROJECT_BRANCH}-${BUILD_NUMBER}", buildArgs.join(" "), " .")
                            customImage.push()
                            //customImage.push("latest")
                        }
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                dir(BUILD_PATH) {
                    script {
                        def appList = APP_LIST.split(',')
                        for (APP in appList) {

                            echo "Deploying $APP"
                            sh """
                            kubectl set image deployment/"$APP" "$APP"="${DOCKER_REGISTRY_URL}/${PROJECT_NAME}:${PROJECT_BRANCH}-${BUILD_NUMBER}" -n int --context "${CONTEXT}"
                            """
                        }




                        //if (env.REPOSITORY_NAME.contains("scheduler-service")) {
                        //    sh """
                        //    kubectl set image deployment/"$APP2" "$APP2"="${DOCKER_REGISTRY_URL}/${PROJECT_NAME}:${PROJECT_BRANCH}-${BUILD_NUMBER}" -n int --context "${CONTEXT}"
                        //    """
                        //}
                    }
                }
            }
        }
    }
    post {
        success { 
            echo 'a'
            // Действия при успешном выполнении
        }
        aborted {
            echo 'b'
            // Действия при прерывании
        }
        failure {
            echo 'c'
            // Действия при ошибке
        }
    }
}
